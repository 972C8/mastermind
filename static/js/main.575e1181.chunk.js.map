{"version":3,"sources":["components/ColorPicker.js","components/Evaluation.js","components/Game.js","reportWebVitals.js","index.js"],"names":["ColorPicker","colors","updateSelectedColor","colorButtons","map","color","value","className","onClick","Evaluation","keys","pegs","keyPegs","peg","index","i","length","push","Game","defaultColor","useState","board","setBoard","gameCode","setGameCode","turn","setTurn","selectedColor","setSelectedColor","Array","fill","evaluation","setEvaluation","message","setMessage","useEffect","createNewGame","createNewBoard","createNewGameCode","tmp","slice","code","Math","floor","random","removed","splice","evaluateGuess","guess","includes","forEach","key","join","indexOf","sort","newTurn","row","isRowDisabled","rowNum","renderRow","boardRow","pegPos","newBoard","currentRow","colorPos","selectedPegColor","updateBoardColor","updateEvaluation","isDisabled","renderBoard","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.575e1181.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Return a div of buttons for all colors provided. The selected color is stored with updateSelectedColor\r\nconst ColorPicker = ({colors, updateSelectedColor}) => {\r\n\r\n    //Create a button for each color\r\n    const colorButtons = colors.map((color) =>\r\n        <button key={color} value={color} className={\"colorpicker btn-peg btn-\" + color}\r\n                onClick={() => updateSelectedColor(color)}/>\r\n    )\r\n\r\n    return (\r\n        <div className=\"colorpicker\">{colorButtons}</div>\r\n    );\r\n};\r\n\r\nexport default ColorPicker;","import React from 'react';\r\n\r\n//Render 4 keyPegs of red and white based on evaluation (keys)\r\nconst Evaluation = (keys) => {\r\n\r\n    //map the keyPegs (red or white) to <span>-elements\r\n    let pegs = keys.keyPegs.map((peg, index) => <span key={index} className={\"key-peg key-\" + peg}/>);\r\n\r\n    //Fill array with default keyPegs so that always 4 keyPegs are rendered\r\n    for (let i = pegs.length; i < 4; i++) {\r\n        pegs.push(<span key={i} className={\"key-peg\"}/>)\r\n    }\r\n\r\n    return (\r\n        <div className=\"key-pegs\">\r\n            {pegs}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Evaluation;\r\n","import React, {useEffect, useState} from 'react';\nimport ColorPicker from \"./ColorPicker\";\nimport Evaluation from \"./Evaluation\";\nimport '../styles/Game.css';\n\nfunction Game() {\n    const maxRows = 6;\n    const colors = [\"red\", \"blue\", \"yellow\", \"green\", \"orange\", \"purple\", \"lime\", \"pink\"];\n    const defaultColor = \"white\";\n\n    const [board, setBoard] = useState(null);\n    const [gameCode, setGameCode] = useState(null);\n    const [turn, setTurn] = useState(0);\n    const [selectedColor, setSelectedColor] = useState(\"red\");\n    const [evaluation, setEvaluation] = useState(Array(maxRows).fill([]))\n    const [message, setMessage] = useState(null);\n\n    //Execute once on first render\n    useEffect(() => {\n        createNewGame();\n        //https://stackoverflow.com/questions/53120972/how-to-call-loading-function-with-react-useeffect-only-once#53121021\n        /* eslint-disable react-hooks/exhaustive-deps */\n    }, []);\n\n    //Create a new game with new board and game code\n    const createNewGame = () => {\n        //Initialize new game\n        setBoard(createNewBoard(defaultColor))\n        setGameCode(createNewGameCode(colors))\n        setTurn(0)\n        setEvaluation(Array(maxRows).fill([]))\n\n        setMessage(\"New game code generated. Have fun solving!\")\n    };\n\n    //Creates a new unique code of 4 colors from all existing colors\n    const createNewGameCode = (colors) => {\n        // Make a copy of the array\n        let tmp = colors.slice(colors);\n        let code = [];\n\n        for (let i = 0; i < 4; i++) {\n            let index = Math.floor(Math.random() * tmp.length);\n            let removed = tmp.splice(index, 1);\n            // Since we are only removing one element\n            code.push(removed[0]);\n        }\n        return code;\n    }\n\n    //Handle game won screen\n    const handleGameWon = () => {\n        //Set turn to maxRows to disable all rows\n        setTurn(maxRows);\n\n        setMessage(\"Game won! You guessed the code correctly.\")\n    }\n\n    //Handle game over screen\n    const handleGameOver = () => {\n        //Set turn to maxRows to disable all rows\n        setTurn(maxRows)\n\n        setMessage(\"Game over! All available turns were consumed. The code was: \" + gameCode.join(\", \"))\n    }\n\n    //Show solution of game code\n    const showSolution = () => {\n        const code = gameCode ? gameCode.join(', ') : \"Create a new game first!\";\n        setMessage(\"The solution is: \" + code);\n    }\n\n    //Show info on how to play\n    const showHowToPlay = () => {\n        const msg = \"https://en.wikipedia.org/wiki/Mastermind_(board_game)\";\n        setMessage(msg);\n    }\n\n    //Update the evaluation state which re-renders the evaluation component\n    const updateEvaluation = (currentRow) => {\n        //the code guess of the current row\n        const guess = board ? board[currentRow] : [];\n\n        //Update evaluation with evaluated guess of the code\n        setEvaluation((evaluation) => {\n            //Update the current row with the new evaluation\n            evaluation[currentRow] = evaluateGuess(guess);\n\n            return evaluation;\n        })\n    }\n\n    //Evaluate the guessed code\n    //Create evaluation of red and white pins\n    const evaluateGuess = (guess) => {\n        let evaluation = [];\n\n        //All colors of the row must be guessed\n        if (guess.includes(defaultColor)) {\n            setMessage(\"Select a color for all pegs!\")\n            return [];\n        }\n\n        //Create evaluation array consisting of red and white pins\n        //White pin = color is correct\n        //Red pin = color and position is correct\n        guess.forEach((peg, key) => {\n\n                //Correct guess. All pins are red\n                if (gameCode.join(',') === guess.join(',')) {\n                    evaluation.push(\"red\");\n                } else {\n                    //Add red/white pins based on evaluation\n                    if (gameCode.includes(peg)) {\n                        //peg color and position match -> red pin\n                        if (gameCode.indexOf(peg) === key) {\n                            evaluation.push(\"red\");\n                        } else {\n                            //only peg color matches\n                            evaluation.push(\"white\");\n                        }\n                    }\n                }\n            }\n        )\n\n        //Handle game won\n        if (gameCode.join(',') === guess.join(',')) {\n            handleGameWon();\n            return evaluation;\n        }\n\n        //Sort the pins by color\n        evaluation.sort();\n\n        //Check if turns are left and increment turn by 1\n        const newTurn = turn + 1;\n        if (newTurn >= maxRows) {\n            handleGameOver();\n        } else {\n            //Increment turn by 1. Check available turns right after\n            setTurn(newTurn)\n        }\n        return evaluation;\n    }\n\n    //Create new board with default color pegs\n    const createNewBoard = (defaultColor) => {\n        const board = [];\n\n        for (let i = 0; i < maxRows; i++) {\n            var row = [defaultColor, defaultColor, defaultColor, defaultColor]\n            board.push(row);\n        }\n        return board;\n    }\n\n    //Update board with the new color\n    //If the color already exists in the row. Swap the positions of the two colors for user convenience.\n    const updateBoardColor = (rowNum, pegPos) => {\n        //Set updated board as new board state\n        setBoard((board) => {\n            //Update board with new color for relevant peg of row\n            const newBoard = board.slice();\n\n            //colorPos represents where the new color was used in the row array (0,1,2,3)\n            //Note: colorPos is -1 if the color was not used yet\n            const currentRow = newBoard[rowNum];\n            const colorPos = currentRow.indexOf(selectedColor);\n\n            //Swap colors of the two pegs\n            if (colorPos >= 0 && colorPos !== pegPos) {\n                //Get color of selected peg\n                const selectedPegColor = currentRow[pegPos];\n\n                //Update selected peg with new color\n                currentRow[pegPos] = selectedColor;\n\n                //Update old peg with color of selected peg\n                currentRow[colorPos] = selectedPegColor;\n            } else {\n                //Update color at given board position\n                currentRow[pegPos] = selectedColor;\n            }\n\n            return newBoard;\n        })\n    }\n\n    //Update the currently selected color\n    const updateSelectedColor = (color) => {\n        setSelectedColor(color);\n    }\n\n    //Return true if row should be disabled\n    //All rows except the current turn's should be disabled\n    const isRowDisabled = (rowNum) => {\n        return turn !== rowNum\n    }\n\n    //Create amount of rows corresponding to maxRows for the board\n    const renderRow = (rowNum) => {\n        const row = [];\n\n        //board[i] doesn't exist before board is initialized\n        const boardRow = board ? board[rowNum] : [];\n\n        //Create 4 pegs per row\n        const pegs = [];\n        for (let pegPos = 0; pegPos < 4; pegPos++) {\n\n            //The color of each peg as stored in state board\n            const color = boardRow[pegPos];\n\n            //Button representing a peg. onClick called when a peg changes its color\n            pegs.push(<button key={pegPos} value={color} className={\"btn-peg btn-\" + color}\n                              onClick={() => updateBoardColor(rowNum, pegPos)}/>)\n        }\n        row.push(pegs);\n\n        //Create additional button and evaluation\n        row.push(<button key={\"btn\" + row} className={\"btn-confirm\"}\n                         onClick={() => updateEvaluation(rowNum)}>Confirm</button>)\n        row.push(<Evaluation key={\"key\" + row} keyPegs={evaluation[rowNum]}/>)\n\n        return row;\n    }\n\n    //Render a board consisting of rows\n    const renderBoard = () => {\n        const board = [];\n\n        //Render the rows and push them into the board\n        for (let rowNum = 0; rowNum < maxRows; rowNum++) {\n\n            //Indicate whether the row should be disabled through css\n            const isDisabled = (isRowDisabled(rowNum) ? \" disabled\" : \"\");\n\n            //Push the rendered row into the board\n            const row = <div key={rowNum} className={\"row\" + isDisabled}>{renderRow(rowNum)}</div>;\n            board.push(row);\n        }\n        return board;\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>MasterMind</h1>\n            <div className={\"top\"}>\n                <button onClick={createNewGame}>Create New Game</button>\n                <button onClick={showSolution}>Show Solution</button>\n                <button onClick={showHowToPlay}>How to play</button>\n            </div>\n            <div className={\"messages\"}>\n                <h3>{message}</h3>\n            </div>\n            <div className={\"center\"}>\n                <ColorPicker colors={colors} updateSelectedColor={updateSelectedColor}/>\n                <div className={\"board\"}>\n                    {renderBoard()}\n                </div>\n            </div>\n            <h6><p>Find the open source code at <a\n                href={\"https://github.com/972C8/mastermind\"}>https://github.com/972C8/mastermind</a></p></h6>\n        </div>\n    );\n}\n\nexport default Game;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport Game from './components/Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}